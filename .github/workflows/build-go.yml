# This workflow will upload a Python Package using Twine when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Build & Tests

# on:
#   push:
#     tags:
#       - "v*"
on:
  push:
    branches:
      - main
      - feature/*
      - bugfix/*
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - main

defaults:
  run:
    shell: bash

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [linux, windows, darwin]
        arch: [amd64, arm64]
        exclude:
          - os: windows
            arch: arm64 # Windows ARM64 is not supported by Go
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Setup GoLang
      uses: actions/setup-go@v5
      with:
        go-version: '~1.22.2'

    # - name: Run vet & lint
    #   run: |
    #     go install golang.org/x/lint/golint@latest
    #     go vet cmd
    #     golint cmd
    # - uses: actions/setup-python@v5
    # - uses: pre-commit/action@v3.0.1

    - name: Get Version from Tag
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

    - name: Build
      id: build
      env:
        GOOS: ${{ matrix.os }}
        GOARCH: ${{ matrix.arch }}
      run: |
        go version

        export CGO_ENABLED=0

        OUTPUT_NAME=td-${{ matrix.os }}-${{ matrix.arch }}
        if [ "${{ matrix.os }}" == "windows" ]; then
          OUTPUT_NAME+=".exe"
        fi
        if [ "${{ matrix.os }}" == "darwin" ]; then
          OUTPUT_NAME=td-macos-${{ matrix.arch }}
        fi
        go build \
          -ldflags="-X main.Version=${VERSION}" \
          -o bin/$OUTPUT_NAME \
          ./cmd/td

        echo "binary=${OUTPUT_NAME}" >> "$GITHUB_OUTPUT"

    - name: Run UPX
      uses: crazy-max/ghaction-upx@v3
      # macos is not supported
      if: ${{ matrix.os != 'darwin' }}
      with:
        version: latest
        files: |
          ./bin/*
        args: -fq

    - uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.build.outputs.binary }}
        path: bin/*

  test:
    name: test on ${{ matrix.os }}
    needs:
      - build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            binary: td-linux-amd64

          - os: macos-latest
            binary: td-macos-amd64

          - os: windows-latest
            binary: td-windows-amd64.exe
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.binary }}
          path: .

      - name: Get Version from Tag
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Run test on Linux/MacOS
        if: matrix.os != 'windows-latest'
        run: |
          chmod +x ${{ matrix.binary }}
          ./${{ matrix.binary }} -V
          ./${{ matrix.binary }} --config tests/test-1.yaml --tag ${VERSION} --push --dry-run
          ./${{ matrix.binary }} --config tests/test-2.yaml --tag ${VERSION} --push --dry-run

      - name: Run test on Windows
        if: matrix.os == 'windows-latest'
        shell: cmd
        run: |
          .\\${{ matrix.binary }} -V
          .\\${{ matrix.binary }} --config tests/test-1.yaml --tag ${VERSION} --push --dry-run
          .\\${{ matrix.binary }} --config tests/test-2.yaml --tag ${VERSION} --push --dry-run

  release:
    runs-on: ubuntu-latest
    needs:
      - test
      - build
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version from tag on master
        run: echo "VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - uses: actions/download-artifact@v4
        with:
          # download all
          path: bin
          merge-multiple: true

      - name: Calculate checksums
        run: |
          cd bin
          sha512sum td-* > sha512sums.txt

      # - name: Update README
      #   if: ${{ !contains(github.event.commits[0].message, 'auto-update README') }}
      #   run: |
      #     cp dist/tpl-linux-amd64 /usr/local/bin/tpl
      #     chmod +x /usr/local/bin/tpl

      #     export TPL_VERSION=${TPL_VERSION}

      #     tpl -t README.md.tpl | tee README.md

      #     git branch

      #     if [[ "$(git status --porcelain)" != "" ]]; then
      #       git config user.name "GitHub Action"
      #       git config user.email "action@github.com"
      #       git add .
      #       git commit -m "docs(readme): auto-update README"
      #       git push origin HEAD:master
      #     fi

      # - name: Create Release
      #   id: create_release
      #   uses: actions/create-release@latest
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     tag_name: ${{ github.ref }}
      #     release_name: ${{ github.ref }}
      #     body: ${{ steps.changelog.outputs.changelog }}
      #     draft: false
      #     prerelease: false

      # - name: Upload multiple assets
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: |
      #     set -x
      #     assets=()
      #     for asset in bin/*; do
      #       assets+=("-a" "$asset")
      #     done
      #     hub release edit "${assets[@]}" -m "" "${GITHUB_REF##*/}"
