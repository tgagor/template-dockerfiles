name: Build & Tests

on:
  repository_dispatch:
    types: [dependabot-merge-event]
  push:
    paths-ignore:
      - 'README.md'
      - 'CONTRIBUTING.md'
    branches:
      - main
      - feature/*
      - bugfix/*
  pull_request:
    branches:
      - main

defaults:
  run:
    shell: bash

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [linux, windows, darwin]
        arch: [amd64, arm64]
        exclude:
          - os: windows
            arch: arm64 # Windows ARM64 is not supported by Go
    steps:
    - name: Checkout Code
      uses: actions/checkout@v5

    - name: Setup GoLang
      uses: actions/setup-go@v6
      with:
        go-version: '~1.25.2'

    # - name: Run vet & lint
    #   run: |
    #     go install golang.org/x/lint/golint@latest
    #     go vet cmd
    #     golint cmd

    - name: Guess next version
      id: guessed_tag_version
      uses: mathieudutour/github-tag-action@v6.2
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        dry_run: true
        append_to_pre_release_tag: pre
    - name: Extract version from tag
      env:
        VERSION_TAG: ${{ steps.guessed_tag_version.outputs.new_tag }}
      run: echo "VERSION=$(echo $VERSION_TAG | sed -e "s/^v//" -e "s/-.*$//")" >> $GITHUB_ENV

    - name: Build
      id: build
      env:
        GOOS: ${{ matrix.os }}
        GOARCH: ${{ matrix.arch }}
      run: |
        set -x
        go version

        export CGO_ENABLED=0

        OUTPUT_NAME=td-${{ matrix.os }}-${{ matrix.arch }}
        if [ "${{ matrix.os }}" == "windows" ]; then
          OUTPUT_NAME+=".exe"
        fi
        if [ "${{ matrix.os }}" == "darwin" ]; then
          OUTPUT_NAME=td-macos-${{ matrix.arch }}
        fi
        go build \
          -ldflags="-X main.BuildVersion=${VERSION}" \
          -o bin/$OUTPUT_NAME \
          ./cmd/td

        echo "binary=${OUTPUT_NAME}" >> "$GITHUB_OUTPUT"

    - name: Run UPX
      uses: crazy-max/ghaction-upx@v3
      # macos is not supported
      if: ${{ matrix.os != 'darwin' }}
      with:
        version: latest
        files: |
          ./bin/*
        args: -fq

    - uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.build.outputs.binary }}
        path: bin/*

  pre-commit:
    name: pre-commit checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup GoLang
        uses: actions/setup-go@v6
        with:
          go-version: '~1.25.2'

      - id: vars
        run: |
          echo "GOBIN=$(go env GOPATH)/bin" >> "$GITHUB_OUTPUT"
          echo "GOVERSION=$(go version | awk '{print $3}')" >> "$GITHUB_OUTPUT"

      - name: Restore cached linting tools
        uses: actions/cache/restore@v4
        with:
          path: |
            ${{ steps.vars.outputs.GOBIN }}/goimports
            ${{ steps.vars.outputs.GOBIN }}/gocyclo
            ${{ steps.vars.outputs.GOBIN }}/golangci-lint
            ${{ steps.vars.outputs.GOBIN }}/gocritic
          key: golint-v1-${{ github.job }}-${{ runner.os }}-${{ steps.vars.outputs.GOVERSION }}-${{ hashFiles('Makefile') }}

      - name: Install dependencies
        run: |
          make install-linters

      - name: Update cache of linting tools
        uses: actions/cache/save@v4
        with:
          path: |
            ${{ steps.vars.outputs.GOBIN }}/goimports
            ${{ steps.vars.outputs.GOBIN }}/gocyclo
            ${{ steps.vars.outputs.GOBIN }}/golangci-lint
            ${{ steps.vars.outputs.GOBIN }}/gocritic
          key: golint-v1-${{ github.job }}-${{ runner.os }}-${{ steps.vars.outputs.GOVERSION }}-${{ hashFiles('Makefile') }}

      - uses: pre-commit/action@v3.0.1

  unit-tests:
    name: unit tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup GoLang
        uses: actions/setup-go@v6
        with:
          go-version: '~1.25.2'

      - name: Run Unit Tests
        run: |
          go test -v  ./...

  smoke-tests:
    name: smoke test on ${{ matrix.os }}
    needs:
      - build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            binary: td-linux-amd64

          - os: macos-latest
            binary: td-macos-amd64

          - os: windows-latest
            binary: td-windows-amd64.exe
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - uses: actions/download-artifact@v5
        with:
          name: ${{ matrix.binary }}
          path: .

      - name: Get Version from Tag
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Run test on Linux/MacOS
        if: matrix.os != 'windows-latest'
        run: |
          chmod +x ${{ matrix.binary }}
          ./${{ matrix.binary }} -V
          ./${{ matrix.binary }} --config tests/test-1.yaml --tag ${VERSION} --delete
          ./${{ matrix.binary }} --config tests/test-2.yaml --tag ${VERSION} --delete
          ./${{ matrix.binary }} --config tests/test-4.yaml --tag ${VERSION} --delete
          ./${{ matrix.binary }} --config tests/test-5.yaml --tag ${VERSION} --delete
          ./${{ matrix.binary }} --config tests/test-7.yaml --tag ${VERSION} --delete
          ./${{ matrix.binary }} --config tests/test-9.yaml --tag ${VERSION} --delete
          ./${{ matrix.binary }} --config tests/test-10.yaml --tag ${VERSION} --delete

      - name: Run test on Windows
        if: matrix.os == 'windows-latest'
        shell: cmd
        run: |
          .\\${{ matrix.binary }} -V
          .\\${{ matrix.binary }} --config tests/test-1.yaml --tag ${VERSION} --delete
          .\\${{ matrix.binary }} --config tests/test-2.yaml --tag ${VERSION} --delete
          .\\${{ matrix.binary }} --config tests/test-4.yaml --tag ${VERSION} --delete
          .\\${{ matrix.binary }} --config tests/test-5.yaml --tag ${VERSION} --delete
          .\\${{ matrix.binary }} --config tests/test-7.yaml --tag ${VERSION} --delete
          .\\${{ matrix.binary }} --config tests/test-9.yaml --tag ${VERSION} --delete
          .\\${{ matrix.binary }} --config tests/test-10.yaml --tag ${VERSION} --delete

  release:
    permissions: write-all
    runs-on: ubuntu-latest
    needs:
      - pre-commit
      - unit-tests
      - smoke-tests
      - build
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Extract version from tag on master
        run: echo "VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - uses: actions/download-artifact@v5
        with:
          # download all
          path: bin
          merge-multiple: true

      - name: Calculate checksums
        run: |
          cd bin
          sha512sum td-* > sha512sums.txt

      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create normal GitHub release
        if: github.ref == 'refs/heads/main' && github.event_name != 'schedule'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag_version.outputs.new_tag }}
          release_name: Release ${{ steps.tag_version.outputs.new_tag }}
          body: ${{ steps.tag_version.outputs.changelog }}

      - name: Upload multiple assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -x
          for asset in bin/*; do
            gh release upload "${{ steps.tag_version.outputs.new_tag }}" "$asset"
          done

      - name: Move major version tag
        run: |
          VERSION_TAG=${{ steps.tag_version.outputs.new_tag }}

          if [ -z "$VERSION_TAG" ]; then
            echo "No version tag found on this commit, skipping."
            exit 0
          fi

          echo "Found version tag: $VERSION_TAG"

          VERSION="${VERSION_TAG#v}"      # e.g. 1.2.3
          MAJOR="${VERSION%%.*}"          # e.g. 1

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git tag -f "v$MAJOR"
          git push origin "v$MAJOR" --force

  dependabot:
    runs-on: ubuntu-latest
    needs:
      - pre-commit
      - unit-tests
      - smoke-tests
      - build
    permissions:
      pull-requests: write
      contents: write
    if: ${{ github.actor == 'dependabot[bot]' && github.event_name == 'pull_request'}}
    steps:
      - id: metadata
        uses: dependabot/fetch-metadata@v2
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"
      - env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr review --approve "$PR_URL"
          gh pr merge --squash --auto "$PR_URL"
